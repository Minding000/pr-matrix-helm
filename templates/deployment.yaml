apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "matrix.fullname" . }}
  labels:
    {{- include "matrix.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "matrix.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "matrix.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: setup
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "v%s" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -c
            - |
              if [ ! -e /data/homeserver.yaml ]; then
                # Generate keys and default configuration
                /start.py generate
              fi
          env:
            - name: SYNAPSE_SERVER_NAME
              value: "{{ .Values.server_name }}"
            - name: SYNAPSE_REPORT_STATS
              value: "no"
          volumeMounts:
            - mountPath: /data
              name: data
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "v%s" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -c
            - |
              printf '%s' "$1" | python -

              # Run synapse
              exec python -m synapse.app.homeserver --config-path /tmp/synapse.yaml
            - "--"
            - |
              import os
              import yaml

              os.umask(0o077)
              with open("/data/homeserver.yaml") as fp:
                  config = yaml.safe_load(fp)

              config["database"] = {
                  "name": "psycopg2",
                  "args": {
                      "user": os.environ["PG_USER"],
                      "password": os.environ["PG_PASSWORD"],
                      "database": os.environ["PG_DB"],
                      "host": os.environ["PG_HOST"],
                      "cp_min": 5,
                      "cp_max": 10,
                  },
              }
              config["serve_server_wellknown"] = True
              {{- if (include "matrix.webClientLocation" .) }}
              config["web_client_location"] = "{{ include "matrix.webClientLocation" . }}"
              {{- end }}
              config["public_baseurl"] = {{ .Values.server_public_url | quote }}
              config["enable_registration"] = {{ if .Values.enable_registration }}True{{ else }}False{{ end }}
              {{- if .Values.metrics.enabled }}
              config["enable_metrics"] = True
              config["listeners"].append({
                "port": {{ .Values.metrics.port }},
                "tls": False,
                "type": "http",
                "x_forwarded": False,
                "resources": [{
                  "names": ["metrics"],
                  "compress": False,
                }],
              })
              {{- end  }}
              config["enable_registration_without_verification"] = {{ if .Values.enable_registration_without_verification }}True{{ else }}False{{ end }}
              {{- if .Values.auto_join_rooms }}
              config["auto_join_rooms"] = [
                {{- range .Values.auto_join_rooms }}
                "{{ . }}",
                {{- end }}
              ]
              {{- end }}
              {{- if .Values.email.enabled }}
              config["email"] = {
                  "smtp_host": "{{ .Values.email.host }}",
                  "smtp_port": {{ .Values.email.port }},
                  {{- if .Values.email.user }}
                  "smtp_user": "{{ .Values.email.user }}",
                  "smtp_pass": os.environ["SMTP_PASSWORD"],
                  {{- end }}
                  "app_name": {{ .Values.app_name | quote }},
                  "enable_notifs": True,
                  "client_base_url": config["web_client_location"],
                  "notif_from": {{ .Values.email.from | quote }},
              }
              {{- end }}
              config["report_stats"] = os.environ.get("SYNAPSE_REPORT_STATS", "").lower() in ("yes", "true", "1")

              with open("/tmp/synapse.yaml", "w") as fp:
                  yaml.dump(config, fp)
          env:
            - name: SYNAPSE_REPORT_STATS
              value: {{ if .Values.report_stats }}"yes"{{ else }}"no"{{ end }}
            - name: PG_USER
              value: "{{ .Values.postgres.user }}"
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ default (include "postgres.fullname" .Subcharts.postgres) .Values.postgres.secret.name }}"
                  key: postgres_password
            - name: PG_DB
              value: "{{ .Values.postgres.database }}"
            - name: PG_HOST
              value: "{{ include "postgres.fullname" .Subcharts.postgres }}"
            {{- if and .Values.email.enabled .Values.email.user }}
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.email.secret.name | quote }}
                  key: {{ .Values.email.secret.key | quote }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8008
              protocol: TCP
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - mountPath: /data
              name: data
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 300
            periodSeconds: 15
            failureThreshold: 4
          readinessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 15
            failureThreshold: 4
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "{{ .Values.storage.persistentClaimName | default (include "matrix.fullname" .) }}"
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
